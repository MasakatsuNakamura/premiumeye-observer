AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Knockme Observer

Globals:
  Function:
    Timeout: 3

Parameters:
  Endpoint:
    Type: String
    Default: ''
  S3BucketNameProd:
    Type: String
    Default: knockme-direct-upload-production
  S3BucketNameStage:
    Type: String
    Default: knockme-direct-upload-stage
  S3BucketNameStage2:
    Type: String
    Default: knockme-direct-upload-stage2

Resources:
  S3BucketProd:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub S3BucketNameProd
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - Id: prodCORSRule
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - '*'

  S3BucketStage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub S3BucketNameStage
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - Id: stageCORSRule
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - '*'

  S3BucketStage2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub S3BucketNameStage2
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - Id: stage2CORSRule
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - '*'

  KnockmeObserverFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/knockme_observer/
      Timeout: 60
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          EMAIL_SNS_TOPIC_ARN: !Ref KnockmeEmailTopic
          SLACK_SNS_TOPIC_ARN: arn:aws:sns:ap-northeast-1:747245521221:awslambdaBot
      Events:
        Production:
          Type: SNS
          Properties:
            Topic: arn:aws:sns:ap-northeast-1:747245521221:notificationProduction
        Stage:
          Type: SNS
          Properties:
            Topic: arn:aws:sns:ap-northeast-1:747245521221:notificationStage
        Stage2:
          Type: SNS
          Properties:
            Topic: arn:aws:sns:ap-northeast-1:747245521221:notificationStage2
      Policies:
        - CloudWatchLogsReadOnlyAccess
        - AmazonSNSFullAccess

  KnockmeObserverLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${KnockmeObserverFunction}
      RetentionInDays: 14

  KnockmeEmailTopic:
    Type: AWS::SNS::Topic
    Properties: 
      TopicName: KnockmeEmailTopic

  KnockmeEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: prod_alert@knockme.jp
      Protocol: email
      TopicArn: !Ref 'KnockmeEmailTopic'

  UpdateActivationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/update_activation/
      Timeout: 60
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        Rule:
          Type: Schedule
          Properties:
            Schedule: cron(0 15 ? * * *)
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'ssm:DescribeActivations'
                - 'ssm:DescribeInstanceInformation'
                - 'ssm:PutParameter'
                - 'ssm:CreateActivation'
                - 'ssm:DeleteActivation'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource: 'arn:aws:iam::747245521221:role/service-role/AmazonEC2RunCommandRoleForManagedInstances'

  UpdateActivationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateActivationFunction}

  SummarizeProcessLogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/summarize_process_logs/
      Environment:
        Variables:
          LOCALSTACK_ENDPOINT: !Ref Endpoint
          ENVIRONMENT: production
      Timeout: 60
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        S3EventProd:
          Type: S3
          Properties:
            Bucket: !Ref S3BucketProd
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: process_logs/
                  - Name: suffix
                    Value: .json.gz
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub S3BucketNameProd

  SummarizeProcessLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SummarizeProcessLogsFunction}

  SummarizeProcessLogsStageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/summarize_process_logs/
      Environment:
        Variables:
          LOCALSTACK_ENDPOINT: !Ref Endpoint
          ENVIRONMENT: stage
      Timeout: 60
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        S3EventStage:
          Type: S3
          Properties:
            Bucket: !Ref S3BucketStage
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: process_logs/
                  - Name: suffix
                    Value: .json.gz
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub S3BucketNameStage

  SummarizeProcessLogsStageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SummarizeProcessLogsStageFunction}

  SummarizeProcessLogsStage2Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/summarize_process_logs/
      Environment:
        Variables:
          LOCALSTACK_ENDPOINT: !Ref Endpoint
          ENVIRONMENT: stage2
      Timeout: 60
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        S3EventStage:
          Type: S3
          Properties:
            Bucket: !Ref S3BucketStage2
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: process_logs/
                  - Name: suffix
                    Value: .json.gz
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub S3BucketNameStage2

  SummarizeProcessLogsStage2LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SummarizeProcessLogsStage2Function}

  NotifyInstanceIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/notify_instance_id/
      Timeout: 60
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          SLACK_SNS_TOPIC_ARN: arn:aws:sns:ap-northeast-1:747245521221:awslambdaBot
      Events:
        ProductionWeb:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: /ecs/prod-web-task-fargate-1_0_0
            FilterPattern: Successfully registered the instance with AWS SSM
        ProductionWorker:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: /ecs/prod-worker-fargate-1_0_0
            FilterPattern: Successfully registered the instance with AWS SSM
        StageWeb:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: /ecs/stg-web-task-fargate
            FilterPattern: Successfully registered the instance with AWS SSM
        StageWorker:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: /ecs/stg-worker-fargate
            FilterPattern: Successfully registered the instance with AWS SSM
        Stage2Web:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: /ecs/stg2-web-task-fargate
            FilterPattern: Successfully registered the instance with AWS SSM
        Stage2Worker:
          Type: CloudWatchLogs
          Properties:
            LogGroupName: /ecs/stg2-worker-fargate
            FilterPattern: Successfully registered the instance with AWS SSM
      Policies:
        - AmazonSNSFullAccess

  NotifyInstanceIdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${NotifyInstanceIdFunction}
      RetentionInDays: 14

Outputs:
  KnockmeObserver:
    Description: "Knockme Observer Lambda Function ARN"
    Value: !GetAtt KnockmeObserverFunction.Arn
