AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Tasuki Observer

Globals:
  Function:
    Timeout: 3

Parameters:
  SourceLogGroupStaging:
    Type: "String"
    Default: "/ecs/tasuki-land-staging"
  SourceLogGroup:
    Type: "String"
    Default: "/ecs/tasuki-land"

Resources:
  TasukiObserverFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/tasuki_observer/
      Timeout: 60
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          EMAIL_SNS_TOPIC_ARN: !Ref TasukiEmailTopic
      Policies:
        - CloudWatchLogsReadOnlyAccess
        - AmazonSNSFullAccess
        - AmazonSSMReadOnlyAccess

  TasukiObserverLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TasukiObserverFunction}
      RetentionInDays: 14

  TasukiEmailTopic:
    Type: AWS::SNS::Topic
    Properties: 
      TopicName: TasukiEmailTopic

  TasukiEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: nakamura.masakatsu@gmail.com
      Protocol: email
      TopicArn: !Ref TasukiEmailTopic

  KouEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: kou@tasukicorp.co.jp
      Protocol: email
      TopicArn: !Ref TasukiEmailTopic

  TasukiLandSubscriptionFilter:
    DependsOn:
      - LambdaInvokePermission
    Type: "AWS::Logs::SubscriptionFilter"
    Properties:
      LogGroupName: !Ref SourceLogGroup
      FilterPattern: |
        [str = "/*" || str = "*ERROR*" || str = "*WARN*" || str = "*FATAL*"]
      DestinationArn: !GetAtt TasukiObserverFunction.Arn

  TasukiLandStagingSubscriptionFilter:
    DependsOn:
      - LambdaInvokePermissionStaging
    Type: "AWS::Logs::SubscriptionFilter"
    Properties:
      LogGroupName: !Ref SourceLogGroupStaging
      FilterPattern: |
        [str = "/*" || str = "*ERROR*" || str = "*WARN*" || str = "*FATAL*"]
      DestinationArn: !GetAtt TasukiObserverFunction.Arn

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref TasukiObserverFunction
      Action: "lambda:InvokeFunction"
      Principal: !Sub "logs.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SourceLogGroup}:*"

  LambdaInvokePermissionStaging:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref TasukiObserverFunction
      Action: "lambda:InvokeFunction"
      Principal: !Sub "logs.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${SourceLogGroupStaging}:*"

Outputs:
  TasukiObserver:
    Description: "Tasuki Observer Lambda Function ARN"
    Value: !GetAtt TasukiObserverFunction.Arn
